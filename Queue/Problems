## Implementation of Queue using Arrays

 class Queue {
     int capacity;
     int fornt, rear, size;
     int arr[];

     public Queue(int capacity) {
         this.capacity = capacity;
         fornt = this.size = 0;
         rear = capacity - 1;
         arr = new int[this.capacity];
     }

     boolean isfull(Queue queue) {
         return (queue.size == queue.capacity);
     }

     boolean isEmpty(Queue queue) {
         return (queue.size == 0);
     }

     void Enque(int item) {
         if (isfull(this))
             return;
         this.rear = (this.rear + 1) % this.capacity;
         this.arr[this.rear] = item;
         this.size = this.size + 1;
         System.out.println(item + "enqued");

     }

     int dequeue() {
         if (isEmpty(this))
             return Integer.MIN_VALUE;

         int item = this.arr[this.fornt];
         this.fornt = (this.fornt + 1) % this.capacity;
         this.size = this.size - 1;
         return item;
     }

     int front() {
         if (isEmpty(this)) return Integer.MIN_VALUE;
         return this.arr[this.fornt];
     }

     int rear() {
         if (isEmpty(this))
             return Integer.MIN_VALUE;

         return this.arr[this.rear];
     }
 }
public class ArrayImpliment {
    public static void main(String[] args) {


    Queue man=new Queue(1000);
    man.Enque(10);
        man.Enque(10);
        man.Enque(20);
        man.Enque(30);
        man.Enque(40);
        System.out.println(man.dequeue()+"dequed");
        System.out.println(man.front()+"front number");
        System.out.println(man.rear()+"rear number");
        System.out.println(man.size+"size of the array");
    }

}
