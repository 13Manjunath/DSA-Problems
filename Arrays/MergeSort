//MergeSorting algorithims

public class MergeSort {
 void mergeSorting(int arr[], int l,int  m,int r) {
     int n1 = m - l + 1;
     int n2 = r - m;
     int L[] = new int[n1];
     int R[] = new int[n2];
     
     for (int i = 0; i < n1; ++i)
         L[i] = arr[l + i];
     for (int j = 0; j < n2; ++j)
         R[j] = arr[m + 1 + j];
//merge the temp arrays
     int i = 0, j = 0;
     int k = l;
     while (i < n1 && j < n2) {
         if (L[i] <= R[j]) {
             arr[k] = L[i];
             i++;
         } else {
             arr[k] = R[j];
             j++;
         }
         k++;
     }
     while (i < n1) {
         arr[k] = L[i];
         i++;
         k++;
     }
     while (j < n2) {
         arr[k] = R[j];
         j++;
         k++;
     }
 }
     void sort ( int arr[], int l, int r){
         if (l < r) {
             int m = l + (r - l) / 2;
             sort(arr, l, m);
             sort(arr, m + 1, r);
             mergeSorting(arr, l, m, r);
         }
     }

    static void printing(int arr[]){
     int n=arr.length;
     for (int i=0;i<n;i++){
         System.out.println(arr[i]);
     }
        System.out.println();
    }

    public static void main(String[] args) {
        int arr[]={3,8,5,9,2,1};
        System.out.println("normal array");
        printing(arr);
        MergeSort my=new MergeSort();
       my.sort(arr,0,arr.length-1);
        System.out.println("the sorted array");
        printing(arr);
    }
}
